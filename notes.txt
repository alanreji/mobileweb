npm run serve

REGISTERING A SERVICEWORKER

navigator.serviceWorker.register('/sw.js').then(function(reg) {
	console.log('Yay!);
}).catch(function(err) {
	console.log('Boo!');
});


HIJACKING A REQUEST

self.addEventListener('fetch', function(event) {
  event.respondWith(
      new Response('Hello World!')
  );
});

HEADERS ADDED

self.addEventListener('fetch', function(event) {
  event.respondWith(
      new Response('Hello World!', {
        headers: {'foo' : 'bar'}
      })
  );
});


INTERCEPTING FAILED REQUESTS

self.addEventListener('fetch', function(event) {
  // TODO: only respond to requests with a
  // url ending in ".jpg"
  event.respondWith(
      fetch(event.request).then(function (response) {
        if (response.status == 404) {
          return new Response("Whoops, not found");
        }
        return response;
      }).catch(function (reason) {
        return new Response('Connection broken');
      })
  );
});


ADDING CACHE

self.addEventListener('install', function(event) {
  var urlsToCache = [
    '/',
    'js/main.js',
    'css/main.css',
    'imgs/icon.png',
    'https://fonts.gstatic.com/s/roboto/v15/2UX7WLTfW3W8TclTUvlFyQ.woff',
    'https://fonts.gstatic.com/s/roboto/v15/d-6IYplOFocCacKzxwXSOD8E0i7KZn-EPnyo3HZu7kw.woff'
  ];

  event.waitUntil(
    // TODO: open a cache named 'wittr-static-v1'
    // Add cache the urls from urlsToCache
    caches.open('wittr-static-v1').then(function (value) {
      value.addAll(urlsToCache);
    })
  );
});

OFFLINE FIRST

self.addEventListener('fetch', function(event) {
  // TODO: respond with an entry from the cache if there is one.
  // If there isn't, fetch from the network.
    event.respondWith(
        caches.match(event.request).then(function (value) {
          if (value) {return value;}
          else {
            return fetch(event.request);
          }
        })
    );
});

UPDATING CSS

self.addEventListener('install', function(event) {
  event.waitUntil(
    // TODO: change the site's theme, eg swap the vars in public/scss/_theme.scss
    // Ensure at least $primary-color changes
    // TODO: change cache name to 'wittr-static-v2'
    caches.open('wittr-static-v2').then(function(cache) {
      return cache.addAll([
        '/',
        'js/main.js',
        'css/main.css',
        'imgs/icon.png',
        'https://fonts.gstatic.com/s/roboto/v15/2UX7WLTfW3W8TclTUvlFyQ.woff',
        'https://fonts.gstatic.com/s/roboto/v15/d-6IYplOFocCacKzxwXSOD8E0i7KZn-EPnyo3HZu7kw.woff'
      ]);
    })
  );
});

self.addEventListener('activate', function(event) {
  event.waitUntil(
    // TODO: remove the old cache
      caches.delete('wittr-static-v1')
  );
});

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request).then(function(response) {
      return response || fetch(event.request);
    })
  );
});